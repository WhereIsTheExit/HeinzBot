from bs4 import BeautifulSoup
import requests
import urllib.request
from urllib.request import urlopen
from googleapiclient.discovery import build
from APIKeyReader import read_key
import logging
import json
import datetime

logging.getLogger('googleapicliet.discovery_cache').setLevel(logging.ERROR)

regionen = {
    "BR":   "braunau-am-inn",
    "EF":   "eferding",  	
    "FR":   "freistadt",
    "GM":   "gmunden",	
    "GR":   "grieskirchen",
    "KI":   "kirchdorf-an-der-krems",
    "L" :   "linz",
    "LL":   "linz-land",	
    "PE":   "perg", 
    "RI":   "ried-im-innkreis",
    "RO":   "rohrbach-im-muehlkreis",
    "SD":   "schaerding",
    "SR":   "steyr",
    "SE":   "steyr-land",
    "UU":   "urfahr-umgebung",
    "VB":   "voecklabruck",
    "WE":   "wels",
    "WL":   "wels-land",
    "OÃ–":   "oberoesterreich",
    "NÃ–":   "niederoesterreich",
    "STMK": "steiermark",
    "WZ": "weiz",
    "G": "graz",
    "BM": "bruck-an-der-mur",
    "LE": "leoben",
    "LI": "liezen",
    "W":    "wien",
    "B":    "burgenland",
    "SBG":  "salzburg",
    "T":    "tirol",
    "V":    "vorarlberg",
    "K":    "kaernten",
    "AT":   "oesterreich"
}


def get5MinTime():
    time = datetime.datetime.utcnow()
    diff = time.minute % 5
    time = time - datetime.timedelta(minutes=diff)

    timestring = time.strftime("%Y%m%d-%H%M")
    return timestring


def getKachelmannImage(pageURL):
    header = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64)"
    }
    soup = get_soup(pageURL, header)

    imageurl = soup.find("meta", property="og:image")
    imageurl = imageurl["content"]
    return imageurl


def getRegion(queryText):
    global regionen
    location = ""
    errorMessage = ""
    if not queryText:
        errorMessage = "Parameter angeben bitte! MÃ¶gliche Regionen:\n" + ", ".join(regionen.keys())
        return (location, errorMessage)
    try:
        location = regionen[queryText.upper()]
    except KeyError:
        errorMessage = "De Region kenn i ned ðŸ™„"
        return (location, errorMessage)

    return (location, errorMessage)


def radar(bot, update):
    queryText = get_command_parameter("/radar", update)

    location, errorMessage = getRegion(queryText)
    if errorMessage != "":
        update.message.reply_text = errorMessage
        return

    # build page url
    baseURL = "https://kachelmannwetter.com/at/regenradar"
    timestring = get5MinTime()
    pageURL = (baseURL + "/{}/{}z.html").format(location, timestring)

    # get image
    imageURL = getKachelmannImage(pageURL)

    # send image
    chat_id = update.message.chat_id
    bot.send_photo(chat_id=chat_id, photo=imageURL)


def tracking(bot, update):
    queryText = get_command_parameter("/tracking", update)

    location, errorMessage = getRegion(queryText)
    if errorMessage != "":
        update.message.reply_text = errorMessage
        return

    # build page url
    baseURL = "https://kachelmannwetter.com/at/stormtracking"
    timestring = get5MinTime()
    pageURL = (baseURL + "/{}/blitze-radarhd/{}z.html").format(location, timestring)

    # get image
    imageURL = getKachelmannImage(pageURL)

    # send image
    chat_id = update.message.chat_id
    bot.send_photo(chat_id=chat_id, photo=imageURL)


def get_soup(url, header):
    req = urllib.request.Request(url, headers=header)
    openurl = urlopen(req)
    soup = BeautifulSoup(openurl, "html.parser")
    return soup


def get_command_parameter(command: str, update) -> str:
    text = update.message.text
    b = update.message.bot.name
    if text.startswith(command+" "):
        return text[len(command)+1:]
    if text.startswith(command + b + " "):
        return text[len(command+b) + 1:]


